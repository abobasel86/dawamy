import { CeremonyOptions, CeremonyOptionsWithoutPath, Config } from "./types";
/**
 * Extracts a single key for the object.
 */
export declare function pull<T extends Record<string, any>, K extends keyof T>(object: T, key: K): T[K];
/**
 * Return all object keys except the ones issued.
 */
export declare function except<T extends Record<string, any>, K extends Array<keyof T>>(object: T, ...keys: K): Partial<T>;
/**
 * Check if an object is a non-empty object.
 */
export declare function isObjectEmpty(value: any): boolean;
/**
 * Deeply merge an object with another object.
 */
export declare function mergeDeep<T extends Record<string, any>, S extends Record<string, any>>(target: T, source: S): T & S;
/**
 * Normalize the Ceremony options to something fetch-able.
 */
export declare function normalizeOptions(options: CeremonyOptionsWithoutPath | string | undefined | null, config: Config, defaultPathKey: keyof typeof config.routes): CeremonyOptions;
